FORMAT: 1A
HOST: https://api.cobinhood.com

# COBINHOOD API Document

## General

COBINHOOD RESTful API URL: `https://api.cobinhood.com`

COBINHOOD WebSocket API URL: `wss://feed.cobinhood.com`

RESTful API SandBox: `https://sandbox-api.cobinhood.com`

WebSocket API SandBox: `wss://sandbox-feed.cobinhood.com`

### HTTP Request Headers
`device_id`
`nonce` for 'POST' 'UPDATE' 'DELETE'

### Timestamps
All timestamps exchanged between client and server are based on server Unix UTC timestamp. Please refer to System Module for retrieving server timestamp.

### Floating Point Values
All floating point values in responses are encoded in `string` type to avoid loss of precision.

### UUID String
+ String
+ e.g. "09619448-e48a-3bd7-3d49-3a4194f9020b"

### Authentication
COBINHOOD uses JWT for APIs that require authentication. JWT header field name is `authorization`. The JWT can be generated and revoked on COBINHOOD exchange API console page.

### API Responses
All responses from API contain a JSON object field named `result`:

A successful response should have HTTP status codes ranging from 100 to 399, and a boolean `success` field with value `true`. Clients should find the response as a JSON object within the `result` object, containing the name of the requested object as the key:
```javascript
{
    "success": true,
    "result": {
        "<object name>": {
            ...
        }
    }
}
```

### Error States
An unsuccessful response would result in HTTP status codes ranging from 400 to 599, and a boolean `success` field with value `false`. If `success` is `false`, an `error` object member containing information that describes the error can be found in the root object:
```
{
    "success": false,
    "error": {
        "error_code": <string>,
    }
}
```

### Rate-limiting
All API requests are rate-limited at 10 requests/sec per user, and 50 requests/sec per IP address.

### Pagination
For APIs that return large amounts of data, the response may need to be paginated, e.g. retrieving the trade history. When pagination is required, a `Link` field can be found in the headers. Take the trade history request as an example:

Request URL: `https://api.cobinhood.com/v1/trading/trades?limit=30&page=7`

Response headers:
```
Link: <https://api.cobinhood.com/v1/trading/trades?limit=30&page=1>; rel="first",<https://api.cobinhood.com/v1/trading/trades?limit=30&page=6&before=cGFnZTZkdWRlaXRzanVzdGFuZXhhbXBsZXdoeXNvc2VyaW91c2NoaWxsCg==>; rel="prev",<https://api.cobinhood.com/v1/trading/trades?limit=30&page=8&before=cGFnZThkdWRlaXRzanVzdGFuZXhhbXBsZXdoeXNvc2VyaW91c2NoaWxsCg==>; rel="next",<https://api.cobinhood.com/v1/trading/trades?limit=30&page=15>; rel="last"
X-Total-Count: 431
```
The `Link` header contains a list of links that direct to the first, previous, next, and last pages of the paginated data. APIs that support pagination take a `limit` query parameter to indicate the page size. Clients should use `limit` to specify the number of entries per page, and use links provided in the response header to navigate through the paginated data. The header `X-Total-Count` indicates the total number of existing entries, in our case, 431 trades.


# Data Structures

# APIResponse (object)
+ success: true (boolean)
+ result (*)

# TierSummary (object)
+ tier (enum[number])
    + Members
        + 1
        + 2
        + 3
+ status (enum[string]) - status of next tier
    + Members
        + not_available
        + queued
        + rejected
        + verified

# SingleTierSummary (object)
+ status: not_available (enum[string]) - kyc status string
    + Members
        + not_available
        + queued
        + rejected
        + verified
+ form (*)

# KYCTierOne (object)
+ first_name: popo (string) - tier 1
+ middle_name: popo (string) - tier 1
+ last_name: didi (string) - tier 1
+ country: taiwan (string) - tier 1
+ birthday: `yyyy-mm-dd` (string) - tier 1
+ phone_number: `+886999999999` (string) - tier 1

# KYCTierTwo (object)
+ address: `taiwan.........` (string) - tier 2
+ id_picture: `mock_cache_key` (string) - cache_key / picture_id
+ id_number: `9876543210` (string) - tier 2
+ id_nationality: `taiwan` (string) - tier 2
+ id_issuing_country: `taiwan` (string) - tier 2
+ id_date_of_expire: `yyyy-mm-dd` (string) - tier 2
+ id_place_of_birth: `yyyy-mm-dd` (string) - tier 2
+ employment_status: employed (enum[string]) - tier 2
    + Members
        + employed
        + self_employed
        + not_employed
        + retired
        + student
+ industry: fintech (string) - tier 2
+ job_title: engineer (string) - tier 2
+ employer_name: POPO (string) - tier 2
+ employer_country: taiwan (string) - tier 2
+ employer_state: taipei (string) - tier 2
+ employer_city: taipei (string) - tier 2
+ employer_district: hsinyi (string) - tier 2
+ employer_building_number: 12345rty (string) - tier 2
+ employer_street: hsinyi (string) - tier 2
+ employer_postal_code: `110` (string) - tier 2
+ source_of_funds: salary (string) - tier 2
+ net_worth_usd: `0-22k` (string) - tier 2
+ expected_level_of_investment: `xxxx` (string) - tier 2
+ has_invested_in_stock: true (boolean) - tier 2
+ exp_in_equity: 10 (number) - tier 2
+ exp_in_derivatives: 10 (number) - tier 2
+ understand_derivative: true (boolean) - tier 2
+ understand_risk: true (boolean) - tier 2
+ facfa_tax_payer_kind: us_citizen_in_us (enum[string]) - tier 2
    + Members
        + us_citizen_in_us
        + us_citizen_not_in_us
        + foreigner_in_us

# KYCTierThree (object)
+ band_statement_picture: `mock_cache_key` (string) - cache_key / picture_id
+ beneficiary_account: `......` (string) -
+ beneficiary_account_name: central_bank (string) - tier 3
+ bank_address: taiwan (string) - tier 3
+ bank_branch: hsinyi (string) - tier 3
+ bank_swift_code: 12345 (string) - tier 3
+ bank_name: my-bank (string) - tier 3
+ bank_city: taipei (string) - tier 3
+ bank_country: taiwan (string) - tier 3
+ bank_statement_issue_date: `yyyy-mm-dd` (string) - tier 3
+ selfie_with_id_and_kyc_form_signed: `mock_cache_key` (string) - cache_key / picture_id

# KYCResult (object)
+ level (enum[number]) - KYC Level
    + Members
        + 0
        + 1
        + 2
        + 3
+ next_level_status (enum[string]) - status of next tier
    + Members
        + not_available
        + queued
        + rejected
+ forms (array)
# SubmitKYCForm
+ tier (enum[number])
    + Members
        + 1
        + 2
        + 3
+ form (*)

## SubmittedResponse (APIResponse)
+ result (object)
    + message: `successfully submitted`
